# Imports
import cv2                          
import tkinter as tk                 # Tkinter for displaying GUI popup messages
from threading import Thread         # Threading to run popup in real time
import time                          # Time module to track inactivity

# Displays a popup message in a separate thread
def show_popup(message="Please look at the camera!"):
    def popup():
        root = tk.Tk()
        root.title("Friendly Reminder")
        root.geometry("400x150")
        label = tk.Label(
            root,
            text=message,
            font=("Helvetica", 14),
            fg="black",
            wraplength=380,
            justify="center"
        )
        label.pack(expand=True)
        root.after(3000, root.destroy)  # Closes popup after 3 seconds
        root.mainloop()

    Thread(target=popup).start()        # Runs popup in background to avoid blocking video stream

# Real-time iris (eye) detector using webcam input
def iris_detector(video=0, b1=7, b2=7, thrsh=3, warning_delay=5):
    cap = cv2.VideoCapture(video)       # Open the specified video stream (0: webcam)

    if not cap.isOpened():
        print("Error: Couldn't access the camera")
        return

    # Load OpenCV's Haar cascade classifier for detecting eyes
    eye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_eye.xml')
    
    last_seen_time = time.time()        # Timestamp of the last successful eye detection
    popup_triggered = False             # Ensures the popup only triggers once per lost detection event

    while True:
        ret, frame = cap.read()         # Capture a frame from the video stream
        if not ret:
            break

        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)  # Convert the frame to black and white for detection
        eyes = eye_cascade.detectMultiScale(
            gray,
            scaleFactor=1.3,
            minNeighbors=5
        )

        if len(eyes) > 0:
            # If eyes are detected, reset the timer and clear popup state
            last_seen_time = time.time()
            popup_triggered = False

            # Draw a rectangle around the first detected eye
            for (ex, ey, ew, eh) in eyes[:1]:
                cv2.rectangle(frame, (ex, ey), (ex+ew, ey+eh), (255, 0, 0), 2)
        else:
            # If no eyes detected for the specified delay duration, trigger popup once
            if time.time() - last_seen_time >= warning_delay and not popup_triggered:
                show_popup("Please keep your eyes on the screen!")
                popup_triggered = True

        # Set up and resize the display window
        cv2.namedWindow("Eye Tracker", cv2.WINDOW_NORMAL)
        cv2.resizeWindow("Eye Tracker", 800, 600)
        cv2.imshow("Eye Tracker", frame)

        # Exit loop if ESC key is pressed
        if cv2.waitKey(30) == 27:
            break

    # Clean up: release the camera and close all OpenCV windows
    cap.release()
    cv2.destroyAllWindows()

# calls function
iris_detector()
